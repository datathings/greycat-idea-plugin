// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _GreyCatLexer.flex

package io.greycat;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.greycat.language.psi.GreyCatTypes.*;

public class _GreyCatLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\12\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\3\34"+
    "\1\35\1\34\1\36\1\34\1\37\2\34\1\40\1\41"+
    "\1\42\1\43\1\44\1\34\1\45\1\46\1\47\2\34"+
    "\1\50\1\51\2\34\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\34\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\34\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\34\1\106\1\107\1\110\7\0\1\111"+
    "\u01da\0\12\112\206\0\12\112\306\0\12\112\234\0\12\112"+
    "\166\0\12\112\140\0\12\112\166\0\12\112\106\0\12\112"+
    "\u0116\0\12\112\106\0\12\112\u0146\0\12\112\46\0\12\112"+
    "\u012c\0\12\112\200\0\12\112\246\0\12\112\6\0\12\112"+
    "\266\0\12\112\126\0\12\112\206\0\12\112\6\0\12\112"+
    "\316\0\2\111\u01a6\0\12\112\46\0\12\112\306\0\12\112"+
    "\26\0\12\112\126\0\12\112\u0196\0\12\112\6\0\u0100\111"+
    "\240\0\12\112\206\0\12\112\u012c\0\12\112\200\0\12\112"+
    "\74\0\12\112\220\0\12\112\166\0\12\112\146\0\12\112"+
    "\206\0\12\112\106\0\12\112\266\0\12\112\u0164\0\62\112"+
    "\100\0\12\112\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\3\30\1\31\1\32\1\33\20\30\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\1\0\1\42\1\43"+
    "\2\0\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\0\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\4\30\1\65\1\66\3\30\1\67"+
    "\4\30\1\70\1\30\1\71\1\72\1\73\20\30\1\74"+
    "\1\41\2\0\1\20\13\30\1\75\14\30\1\76\1\30"+
    "\1\77\1\100\2\30\1\101\7\30\1\102\1\103\4\30"+
    "\1\104\3\30\1\105\1\30\1\106\1\107\1\30\1\110"+
    "\1\111\6\30\1\112\1\113\2\30\1\114\1\115\5\30"+
    "\1\116\1\117\10\30\1\120\1\30\1\121\1\30\1\122"+
    "\10\30\1\123\1\124\1\30\1\125\5\30\1\126\1\127"+
    "\1\130\11\30\1\131\13\30\1\132\1\30\1\133\10\30"+
    "\1\134\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\113\0\u0177\0\u01c2"+
    "\0\u020d\0\113\0\113\0\u0258\0\u02a3\0\113\0\u02ee\0\u0339"+
    "\0\u0384\0\u03cf\0\u041a\0\113\0\u0465\0\u04b0\0\u04fb\0\u0546"+
    "\0\113\0\u0591\0\u05dc\0\u0627\0\113\0\113\0\113\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\113"+
    "\0\u0b22\0\113\0\113\0\113\0\u012c\0\113\0\u0b6d\0\113"+
    "\0\113\0\u020d\0\u0bb8\0\113\0\113\0\113\0\113\0\113"+
    "\0\113\0\113\0\113\0\u0c03\0\u0c4e\0\113\0\u0c99\0\113"+
    "\0\113\0\113\0\113\0\113\0\113\0\u0ce4\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0591\0\u0591\0\u0e10\0\u0e5b\0\u0ea6\0\u0591\0\u0ef1"+
    "\0\u0f3c\0\u0f87\0\u0fd2\0\u0591\0\u101d\0\u0591\0\u0591\0\u0591"+
    "\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275"+
    "\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd"+
    "\0\113\0\u012c\0\u0c03\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644"+
    "\0\u168f\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c"+
    "\0\u0591\0\u18e7\0\u1932\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9"+
    "\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u0591\0\u1c6b\0\u0591"+
    "\0\u0591\0\u1cb6\0\u1d01\0\u0c03\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d"+
    "\0\u1e78\0\u1ec3\0\u1f0e\0\u0591\0\u0591\0\u1f59\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u0591\0\u2085\0\u20d0\0\u211b\0\u0591\0\u2166\0\u0591"+
    "\0\u0591\0\u21b1\0\u0591\0\u0591\0\u21fc\0\u2247\0\u2292\0\u22dd"+
    "\0\u2328\0\u2373\0\u0591\0\u0591\0\u23be\0\u2409\0\u0591\0\u0591"+
    "\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u0591\0\u0591\0\u25cb"+
    "\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u0591"+
    "\0\u2823\0\u0591\0\u286e\0\u0591\0\u28b9\0\u2904\0\u294f\0\u299a"+
    "\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u0591\0\u0591\0\u2b11\0\u0591"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u0591\0\u0591\0\u0591"+
    "\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0"+
    "\0\u2f2b\0\u0591\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed"+
    "\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u0591\0\u32af\0\u0591"+
    "\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507"+
    "\0\u0591\0\u0591";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\32\1\33\7\32\1\34\4\32\1\35\1\2\1\36"+
    "\1\37\1\32\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\32\1\46\1\32\1\47\1\32\1\50\1\32\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\32\1\60"+
    "\1\61\1\62\2\2\114\0\4\3\113\0\1\63\21\0"+
    "\1\64\63\0\6\65\1\66\44\65\1\67\37\65\27\0"+
    "\1\70\74\0\1\71\101\0\12\72\1\66\40\72\1\73"+
    "\37\72\22\0\1\74\4\0\1\75\101\0\1\76\4\0"+
    "\1\22\3\0\1\77\103\0\1\100\2\0\1\22\3\0"+
    "\1\101\1\102\103\0\1\103\106\0\1\104\4\0\1\105"+
    "\4\0\1\106\104\0\1\107\1\0\1\22\32\0\1\22"+
    "\33\0\1\22\24\0\1\110\115\0\1\111\112\0\1\112"+
    "\112\0\1\113\112\0\1\114\1\0\1\115\104\0\1\32"+
    "\7\0\17\32\4\0\30\32\30\0\1\32\7\0\7\32"+
    "\1\116\6\32\1\117\4\0\30\32\30\0\1\32\7\0"+
    "\1\120\16\32\4\0\30\32\30\0\1\32\7\0\17\32"+
    "\4\0\2\32\1\121\16\32\1\122\1\123\5\32\30\0"+
    "\1\32\7\0\17\32\4\0\20\32\1\124\7\32\30\0"+
    "\1\32\7\0\17\32\4\0\1\32\1\125\14\32\1\126"+
    "\11\32\30\0\1\32\7\0\17\32\4\0\16\32\1\127"+
    "\11\32\30\0\1\32\7\0\17\32\4\0\13\32\1\130"+
    "\1\32\1\131\10\32\1\132\1\32\30\0\1\32\7\0"+
    "\17\32\4\0\1\32\1\133\13\32\1\134\1\135\11\32"+
    "\30\0\1\32\7\0\17\32\4\0\6\32\1\136\6\32"+
    "\1\137\3\32\1\140\6\32\30\0\1\32\7\0\17\32"+
    "\4\0\11\32\1\141\16\32\30\0\1\32\7\0\17\32"+
    "\4\0\1\32\1\142\21\32\1\143\4\32\30\0\1\32"+
    "\7\0\17\32\4\0\20\32\1\144\7\32\30\0\1\32"+
    "\7\0\17\32\4\0\5\32\1\145\22\32\30\0\1\32"+
    "\7\0\17\32\4\0\1\32\1\146\10\32\1\147\7\32"+
    "\1\150\5\32\30\0\1\32\7\0\17\32\4\0\1\32"+
    "\1\151\6\32\1\152\7\32\1\153\6\32\1\154\30\0"+
    "\1\32\7\0\17\32\4\0\21\32\1\155\6\32\30\0"+
    "\1\32\7\0\17\32\4\0\1\32\1\156\26\32\30\0"+
    "\1\32\7\0\17\32\4\0\10\32\1\157\1\160\16\32"+
    "\114\0\1\161\3\0\6\65\1\162\44\65\1\67\37\65"+
    "\2\72\3\0\104\72\1\0\1\72\3\163\2\0\10\163"+
    "\1\164\73\163\1\0\1\163\2\105\1\0\1\105\1\0"+
    "\106\105\23\0\1\165\112\0\1\32\7\0\14\32\1\166"+
    "\2\32\4\0\30\32\30\0\1\32\7\0\4\32\1\167"+
    "\12\32\4\0\30\32\30\0\1\32\7\0\15\32\1\170"+
    "\1\32\4\0\30\32\30\0\1\32\7\0\17\32\4\0"+
    "\21\32\1\171\6\32\30\0\1\32\7\0\17\32\4\0"+
    "\5\32\1\172\22\32\30\0\1\32\7\0\17\32\4\0"+
    "\22\32\1\173\5\32\30\0\1\32\7\0\17\32\4\0"+
    "\15\32\1\174\12\32\30\0\1\32\7\0\17\32\4\0"+
    "\21\32\1\175\6\32\30\0\1\32\7\0\17\32\4\0"+
    "\23\32\1\176\4\32\30\0\1\32\7\0\17\32\4\0"+
    "\22\32\1\177\5\32\30\0\1\32\7\0\17\32\4\0"+
    "\13\32\1\200\14\32\30\0\1\32\7\0\17\32\4\0"+
    "\20\32\1\201\7\32\30\0\1\32\7\0\17\32\4\0"+
    "\14\32\1\202\13\32\30\0\1\32\7\0\17\32\4\0"+
    "\22\32\1\203\5\32\30\0\1\32\7\0\17\32\4\0"+
    "\13\32\1\204\14\32\30\0\1\32\7\0\17\32\4\0"+
    "\11\32\1\205\16\32\30\0\1\32\7\0\17\32\4\0"+
    "\22\32\1\206\5\32\30\0\1\32\7\0\17\32\4\0"+
    "\14\32\1\207\13\32\30\0\1\32\7\0\17\32\4\0"+
    "\11\32\1\210\16\32\30\0\1\32\7\0\17\32\4\0"+
    "\1\32\1\211\26\32\30\0\1\32\7\0\17\32\4\0"+
    "\21\32\1\212\6\32\30\0\1\32\7\0\17\32\4\0"+
    "\11\32\1\213\6\32\1\214\7\32\30\0\1\32\7\0"+
    "\17\32\4\0\23\32\1\215\3\32\1\216\30\0\1\32"+
    "\7\0\17\32\4\0\17\32\1\217\10\32\30\0\1\32"+
    "\7\0\17\32\4\0\5\32\1\220\22\32\30\0\1\32"+
    "\7\0\17\32\4\0\20\32\1\221\7\32\30\0\1\32"+
    "\7\0\17\32\4\0\11\32\1\222\16\32\30\0\1\32"+
    "\7\0\17\32\4\0\22\32\1\223\5\32\5\0\3\163"+
    "\2\0\10\163\1\164\4\163\1\224\66\163\1\0\1\163"+
    "\23\0\1\165\32\0\1\165\33\0\1\165\23\0\1\32"+
    "\7\0\2\32\1\225\14\32\4\0\30\32\30\0\1\32"+
    "\7\0\14\32\1\226\2\32\4\0\30\32\30\0\1\32"+
    "\7\0\17\32\4\0\1\227\27\32\30\0\1\32\7\0"+
    "\17\32\4\0\22\32\1\230\5\32\30\0\1\32\7\0"+
    "\17\32\4\0\1\32\1\231\26\32\30\0\1\32\7\0"+
    "\17\32\4\0\3\32\1\232\24\32\30\0\1\32\7\0"+
    "\17\32\4\0\22\32\1\233\5\32\30\0\1\32\7\0"+
    "\17\32\4\0\5\32\1\234\22\32\30\0\1\32\7\0"+
    "\17\32\4\0\14\32\1\235\13\32\30\0\1\32\7\0"+
    "\17\32\4\0\5\32\1\236\22\32\30\0\1\32\7\0"+
    "\17\32\4\0\21\32\1\237\6\32\30\0\1\32\7\0"+
    "\17\32\4\0\11\32\1\240\16\32\30\0\1\32\7\0"+
    "\17\32\4\0\11\32\1\241\16\32\30\0\1\32\7\0"+
    "\17\32\4\0\13\32\1\242\14\32\30\0\1\32\7\0"+
    "\17\32\4\0\24\32\1\243\3\32\30\0\1\32\7\0"+
    "\17\32\4\0\23\32\1\244\4\32\30\0\1\32\7\0"+
    "\17\32\4\0\17\32\1\245\10\32\30\0\1\32\7\0"+
    "\17\32\4\0\17\32\1\246\10\32\30\0\1\32\7\0"+
    "\17\32\4\0\22\32\1\247\5\32\30\0\1\32\7\0"+
    "\17\32\4\0\12\32\1\250\15\32\30\0\1\32\7\0"+
    "\17\32\4\0\21\32\1\251\6\32\30\0\1\32\7\0"+
    "\17\32\4\0\16\32\1\252\11\32\30\0\1\32\7\0"+
    "\17\32\4\0\5\32\1\253\22\32\30\0\1\32\7\0"+
    "\17\32\4\0\5\32\1\254\22\32\30\0\1\32\7\0"+
    "\17\32\4\0\13\32\1\255\14\32\30\0\1\32\7\0"+
    "\17\32\4\0\10\32\1\256\17\32\30\0\1\32\7\0"+
    "\12\32\1\257\4\32\4\0\30\32\30\0\1\32\7\0"+
    "\17\32\4\0\1\260\27\32\30\0\1\32\7\0\13\32"+
    "\1\261\3\32\4\0\30\32\30\0\1\32\7\0\17\32"+
    "\4\0\20\32\1\262\7\32\30\0\1\32\7\0\17\32"+
    "\4\0\12\32\1\263\15\32\30\0\1\32\7\0\17\32"+
    "\4\0\10\32\1\264\17\32\30\0\1\32\7\0\17\32"+
    "\4\0\11\32\1\265\16\32\30\0\1\32\7\0\17\32"+
    "\4\0\15\32\1\266\12\32\30\0\1\32\7\0\17\32"+
    "\4\0\5\32\1\267\22\32\30\0\1\32\7\0\17\32"+
    "\4\0\22\32\1\270\5\32\30\0\1\32\7\0\17\32"+
    "\4\0\24\32\1\271\3\32\30\0\1\32\7\0\17\32"+
    "\4\0\1\32\1\272\26\32\30\0\1\32\7\0\17\32"+
    "\4\0\20\32\1\273\7\32\30\0\1\32\7\0\17\32"+
    "\4\0\13\32\1\274\14\32\30\0\1\32\7\0\17\32"+
    "\4\0\11\32\1\275\16\32\30\0\1\32\7\0\17\32"+
    "\4\0\25\32\1\276\2\32\30\0\1\32\7\0\17\32"+
    "\4\0\5\32\1\277\22\32\30\0\1\32\7\0\17\32"+
    "\4\0\16\32\1\300\11\32\30\0\1\32\7\0\17\32"+
    "\4\0\1\301\27\32\30\0\1\32\7\0\4\32\1\302"+
    "\7\32\1\303\2\32\4\0\30\32\30\0\1\32\7\0"+
    "\14\32\1\304\2\32\4\0\30\32\30\0\1\32\7\0"+
    "\17\32\4\0\1\32\1\305\26\32\30\0\1\32\7\0"+
    "\17\32\4\0\15\32\1\306\12\32\30\0\1\32\7\0"+
    "\17\32\4\0\4\32\1\307\23\32\30\0\1\32\7\0"+
    "\17\32\4\0\5\32\1\310\22\32\30\0\1\32\7\0"+
    "\17\32\4\0\22\32\1\311\5\32\30\0\1\32\7\0"+
    "\17\32\4\0\15\32\1\312\12\32\30\0\1\32\7\0"+
    "\17\32\4\0\11\32\1\313\16\32\30\0\1\32\7\0"+
    "\17\32\4\0\3\32\1\314\24\32\30\0\1\32\7\0"+
    "\17\32\4\0\23\32\1\315\4\32\30\0\1\32\7\0"+
    "\4\32\1\316\7\32\1\317\2\32\4\0\30\32\30\0"+
    "\1\32\7\0\7\32\1\320\7\32\4\0\30\32\30\0"+
    "\1\32\7\0\2\32\1\321\14\32\4\0\30\32\30\0"+
    "\1\32\7\0\12\32\1\322\4\32\4\0\30\32\30\0"+
    "\1\32\7\0\17\32\4\0\3\32\1\323\24\32\30\0"+
    "\1\32\7\0\17\32\4\0\23\32\1\324\4\32\30\0"+
    "\1\32\7\0\17\32\4\0\21\32\1\325\6\32\30\0"+
    "\1\32\7\0\17\32\4\0\5\32\1\326\22\32\30\0"+
    "\1\32\7\0\17\32\4\0\15\32\1\327\12\32\30\0"+
    "\1\32\7\0\17\32\4\0\22\32\1\330\5\32\30\0"+
    "\1\32\7\0\7\32\1\331\7\32\4\0\30\32\30\0"+
    "\1\32\7\0\2\32\1\332\14\32\4\0\30\32\30\0"+
    "\1\32\7\0\14\32\1\333\2\32\4\0\30\32\30\0"+
    "\1\32\7\0\6\32\1\334\10\32\4\0\30\32\30\0"+
    "\1\32\7\0\4\32\1\335\12\32\4\0\30\32\30\0"+
    "\1\32\7\0\17\32\4\0\22\32\1\336\5\32\30\0"+
    "\1\32\7\0\17\32\4\0\5\32\1\337\22\32\30\0"+
    "\1\32\7\0\17\32\4\0\7\32\1\340\20\32\30\0"+
    "\1\32\7\0\14\32\1\341\2\32\4\0\30\32\30\0"+
    "\1\32\7\0\6\32\1\342\10\32\4\0\30\32\30\0"+
    "\1\32\7\0\2\32\1\343\14\32\4\0\30\32\30\0"+
    "\1\32\7\0\11\32\1\344\5\32\4\0\30\32\30\0"+
    "\1\32\7\0\7\32\1\345\7\32\4\0\30\32\30\0"+
    "\1\32\7\0\2\32\1\346\14\32\4\0\30\32\30\0"+
    "\1\32\7\0\11\32\1\347\5\32\4\0\30\32\30\0"+
    "\1\32\7\0\12\32\1\350\4\32\4\0\30\32\30\0"+
    "\1\32\7\0\5\32\1\351\11\32\4\0\30\32\30\0"+
    "\1\32\7\0\3\32\1\352\13\32\4\0\30\32\30\0"+
    "\1\32\7\0\12\32\1\353\4\32\4\0\30\32\30\0"+
    "\1\32\7\0\5\32\1\354\11\32\4\0\30\32\30\0"+
    "\1\32\7\0\11\32\1\355\5\32\4\0\30\32\30\0"+
    "\1\32\7\0\1\356\16\32\4\0\30\32\30\0\1\32"+
    "\7\0\11\32\1\357\5\32\4\0\30\32\30\0\1\32"+
    "\7\0\1\360\16\32\4\0\30\32\30\0\1\32\7\0"+
    "\10\32\1\361\6\32\4\0\30\32\30\0\1\32\7\0"+
    "\14\32\1\362\2\32\4\0\30\32\30\0\1\32\7\0"+
    "\10\32\1\363\6\32\4\0\30\32\30\0\1\32\7\0"+
    "\14\32\1\364\2\32\4\0\30\32\30\0\1\32\7\0"+
    "\5\32\1\365\11\32\4\0\30\32\30\0\1\32\7\0"+
    "\2\32\1\366\14\32\4\0\30\32\30\0\1\32\7\0"+
    "\5\32\1\367\11\32\4\0\30\32\30\0\1\32\7\0"+
    "\2\32\1\370\14\32\4\0\30\32\30\0\1\32\7\0"+
    "\1\371\16\32\4\0\30\32\30\0\1\32\7\0\1\372"+
    "\16\32\4\0\30\32\30\0\1\32\7\0\14\32\1\373"+
    "\2\32\4\0\30\32\30\0\1\32\7\0\14\32\1\374"+
    "\2\32\4\0\30\32\30\0\1\32\7\0\4\32\1\375"+
    "\12\32\4\0\30\32\30\0\1\32\7\0\4\32\1\376"+
    "\12\32\4\0\30\32\30\0\1\32\7\0\10\32\1\377"+
    "\6\32\4\0\30\32\30\0\1\32\7\0\10\32\1\u0100"+
    "\6\32\4\0\30\32\30\0\1\32\7\0\7\32\1\u0101"+
    "\7\32\4\0\30\32\30\0\1\32\7\0\7\32\1\u0102"+
    "\7\32\4\0\30\32\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13650];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\2\11\2\1\1\11"+
    "\5\1\1\11\4\1\1\11\3\1\3\11\20\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\2\11\2\0\10\11"+
    "\2\1\1\11\1\0\6\11\43\1\1\11\1\1\2\0"+
    "\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _GreyCatLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GreyCatLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 94: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 95: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 96: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 97: break;
          case 5:
            { return PERCENT;
            }
          // fall through
          case 98: break;
          case 6:
            { return AMP;
            }
          // fall through
          case 99: break;
          case 7:
            { return SQUOTE;
            }
          // fall through
          case 100: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 101: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 102: break;
          case 10:
            { return STAR;
            }
          // fall through
          case 103: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 104: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 105: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 106: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 107: break;
          case 15:
            { return SLASH;
            }
          // fall through
          case 108: break;
          case 16:
            { return NUMBER;
            }
          // fall through
          case 109: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 110: break;
          case 18:
            { return SEMI;
            }
          // fall through
          case 111: break;
          case 19:
            { return LT;
            }
          // fall through
          case 112: break;
          case 20:
            { return EQ;
            }
          // fall through
          case 113: break;
          case 21:
            { return GT;
            }
          // fall through
          case 114: break;
          case 22:
            { return QUESTION;
            }
          // fall through
          case 115: break;
          case 23:
            { return AT;
            }
          // fall through
          case 116: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 117: break;
          case 25:
            { return LSQUARE;
            }
          // fall through
          case 118: break;
          case 26:
            { return RSQUARE;
            }
          // fall through
          case 119: break;
          case 27:
            { return CARET;
            }
          // fall through
          case 120: break;
          case 28:
            { return LCURLY;
            }
          // fall through
          case 121: break;
          case 29:
            { return BAR;
            }
          // fall through
          case 122: break;
          case 30:
            { return RCURLY;
            }
          // fall through
          case 123: break;
          case 31:
            { return NOT_NOT;
            }
          // fall through
          case 124: break;
          case 32:
            { return NOT_EQ;
            }
          // fall through
          case 125: break;
          case 33:
            { return STRING;
            }
          // fall through
          case 126: break;
          case 34:
            { return PERCENT_EQ;
            }
          // fall through
          case 127: break;
          case 35:
            { return AMP_AMP;
            }
          // fall through
          case 128: break;
          case 36:
            { return STAR_SLASH;
            }
          // fall through
          case 129: break;
          case 37:
            { return STAR_EQ;
            }
          // fall through
          case 130: break;
          case 38:
            { return PLUS_PLUS;
            }
          // fall through
          case 131: break;
          case 39:
            { return PLUS_EQ;
            }
          // fall through
          case 132: break;
          case 40:
            { return MINUS_MINUS;
            }
          // fall through
          case 133: break;
          case 41:
            { return MINUS_EQ;
            }
          // fall through
          case 134: break;
          case 42:
            { return ARROW;
            }
          // fall through
          case 135: break;
          case 43:
            { return DOT_DOT;
            }
          // fall through
          case 136: break;
          case 44:
            { return SLASH_STAR;
            }
          // fall through
          case 137: break;
          case 45:
            { return LINE_COMMENT;
            }
          // fall through
          case 138: break;
          case 46:
            { return SLASH_EQ;
            }
          // fall through
          case 139: break;
          case 47:
            { return COLON_COLON;
            }
          // fall through
          case 140: break;
          case 48:
            { return LT_EQ;
            }
          // fall through
          case 141: break;
          case 49:
            { return EQ_EQ;
            }
          // fall through
          case 142: break;
          case 50:
            { return GT_EQ;
            }
          // fall through
          case 143: break;
          case 51:
            { return QUESTION_EQ;
            }
          // fall through
          case 144: break;
          case 52:
            { return QUESTION_QUESTION;
            }
          // fall through
          case 145: break;
          case 53:
            { return AS_KW;
            }
          // fall through
          case 146: break;
          case 54:
            { return AT_KW;
            }
          // fall through
          case 147: break;
          case 55:
            { return DO_KW;
            }
          // fall through
          case 148: break;
          case 56:
            { return FN_KW;
            }
          // fall through
          case 149: break;
          case 57:
            { return IF_KW;
            }
          // fall through
          case 150: break;
          case 58:
            { return IN_KW;
            }
          // fall through
          case 151: break;
          case 59:
            { return IS_KW;
            }
          // fall through
          case 152: break;
          case 60:
            { return BAR_BAR;
            }
          // fall through
          case 153: break;
          case 61:
            { return FOR_KW;
            }
          // fall through
          case 154: break;
          case 62:
            { return TRY_KW;
            }
          // fall through
          case 155: break;
          case 63:
            { return USE_KW;
            }
          // fall through
          case 156: break;
          case 64:
            { return VAR_KW;
            }
          // fall through
          case 157: break;
          case 65:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 158: break;
          case 66:
            { return ELSE_KW;
            }
          // fall through
          case 159: break;
          case 67:
            { return ENUM_KW;
            }
          // fall through
          case 160: break;
          case 68:
            { return NULL_KW;
            }
          // fall through
          case 161: break;
          case 69:
            { return SKIP_KW;
            }
          // fall through
          case 162: break;
          case 70:
            { return TASK_KW;
            }
          // fall through
          case 163: break;
          case 71:
            { return THIS_KW;
            }
          // fall through
          case 164: break;
          case 72:
            { return TRUE_KW;
            }
          // fall through
          case 165: break;
          case 73:
            { return TYPE_KW;
            }
          // fall through
          case 166: break;
          case 74:
            { return BREAK_KW;
            }
          // fall through
          case 167: break;
          case 75:
            { return CATCH_KW;
            }
          // fall through
          case 168: break;
          case 76:
            { return FALSE_KW;
            }
          // fall through
          case 169: break;
          case 77:
            { return LIMIT_KW;
            }
          // fall through
          case 170: break;
          case 78:
            { return THROW_KW;
            }
          // fall through
          case 171: break;
          case 79:
            { return WHILE_KW;
            }
          // fall through
          case 172: break;
          case 80:
            { return NATIVE_KW;
            }
          // fall through
          case 173: break;
          case 81:
            { return RETURN_KW;
            }
          // fall through
          case 174: break;
          case 82:
            { return STATIC_KW;
            }
          // fall through
          case 175: break;
          case 83:
            { return EXTENDS_KW;
            }
          // fall through
          case 176: break;
          case 84:
            { return PRIVATE_KW;
            }
          // fall through
          case 177: break;
          case 85:
            { return WITHOUT_KW;
            }
          // fall through
          case 178: break;
          case 86:
            { return ABSTRACT_KW;
            }
          // fall through
          case 179: break;
          case 87:
            { return CONTINUE_KW;
            }
          // fall through
          case 180: break;
          case 88:
            { return SAMPLING_KW;
            }
          // fall through
          case 181: break;
          case 89:
            { return RAW_STRING;
            }
          // fall through
          case 182: break;
//          case 90:
//            { return EXIT_TEMPLATE;
//            }
          // fall through
          case 183: break;
//          case 91:
//            { return ENTER_TEMPLATE;
//            }
          // fall through
          case 184: break;
          case 92:
            { return EXIT_INTERPOLATION;
            }
          // fall through
          case 185: break;
          case 93:
            { return ENTER_INTERPOLATION;
            }
          // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
