// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _GreyCatLexer.flex

package io.greycat.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.greycat.language.psi.GreyCatTypes.*;


public class _GreyCatLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\25\6\23\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\3\36\1\37\1\36\1\40\1\36\1\41"+
    "\2\36\1\42\1\36\1\43\1\44\1\45\1\36\1\46"+
    "\1\47\1\50\2\36\1\51\1\52\2\36\1\53\1\54"+
    "\1\55\1\56\1\57\1\0\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\36\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\36\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\36\1\107\1\110"+
    "\1\111\7\0\1\112\u01da\0\12\113\206\0\12\113\306\0"+
    "\12\113\234\0\12\113\166\0\12\113\140\0\12\113\166\0"+
    "\12\113\106\0\12\113\u0116\0\12\113\106\0\12\113\u0146\0"+
    "\12\113\46\0\12\113\u012c\0\12\113\200\0\12\113\246\0"+
    "\12\113\6\0\12\113\266\0\12\113\126\0\12\113\206\0"+
    "\12\113\6\0\12\113\316\0\2\112\u01a6\0\12\113\46\0"+
    "\12\113\306\0\12\113\26\0\12\113\126\0\12\113\u0196\0"+
    "\12\113\6\0\u0100\112\240\0\12\113\206\0\12\113\u012c\0"+
    "\12\113\200\0\12\113\74\0\12\113\220\0\12\113\166\0"+
    "\12\113\146\0\12\113\206\0\12\113\106\0\12\113\266\0"+
    "\12\113\u0164\0\62\113\100\0\12\113\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\31\1\32\1\33\1\34\16\31\1\35\4\31"+
    "\1\36\1\37\1\40\1\41\1\42\1\0\1\43\1\0"+
    "\1\44\1\45\2\0\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\0\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\4\31\1\67\1\70"+
    "\4\31\1\71\6\31\1\72\3\31\1\73\1\74\1\75"+
    "\2\31\1\76\10\31\1\77\1\100\5\31\1\101\3\31"+
    "\1\102\1\43\2\0\1\21\7\31\1\103\6\31\1\104"+
    "\1\105\1\31\1\106\1\31\1\107\10\31\1\110\1\111"+
    "\1\112\5\31\1\113\1\31\1\114\1\115\2\31\1\116"+
    "\10\31\1\117\1\120\3\31\1\121\2\31\1\122\1\123"+
    "\3\31\1\124\1\31\1\125\1\126\1\31\1\127\1\130"+
    "\1\131\6\31\1\132\1\133\3\31\1\134\1\135\1\136"+
    "\11\31\1\137\1\31\1\140\10\31\1\141\5\31\1\142"+
    "\1\31\1\143\1\144\7\31\1\145\1\146\3\31\1\147"+
    "\1\31\1\150\3\31\1\151\1\152\1\153\1\31\1\154"+
    "\1\155\1\156\3\31\1\157\2\31\1\160\17\31\1\161"+
    "\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\114\0\u017c\0\u01c8"+
    "\0\u0214\0\114\0\114\0\u0260\0\u02ac\0\114\0\u02f8\0\u0344"+
    "\0\u0390\0\u03dc\0\u0428\0\114\0\u0474\0\u04c0\0\u050c\0\u0558"+
    "\0\114\0\u05a4\0\u05f0\0\u063c\0\114\0\114\0\114\0\u0688"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u0b94\0\u0be0\0\114\0\u0c2c\0\114\0\114\0\114\0\u0130"+
    "\0\114\0\u0c78\0\114\0\114\0\u0214\0\u0cc4\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\u0d10\0\u0d5c"+
    "\0\114\0\u0da8\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u05a4\0\u05a4\0\u0f24\0\u0f70"+
    "\0\u0fbc\0\u1008\0\u05a4\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184"+
    "\0\u11d0\0\u05a4\0\u121c\0\u1268\0\u12b4\0\u05a4\0\u1300\0\u05a4"+
    "\0\u134c\0\u1398\0\u05a4\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514"+
    "\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774"+
    "\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\114\0\u0130"+
    "\0\u0d10\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50"+
    "\0\u1b9c\0\u1be8\0\u05a4\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64"+
    "\0\u1db0\0\u05a4\0\u05a4\0\u1dfc\0\u05a4\0\u1e48\0\u05a4\0\u1e94"+
    "\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u05a4"+
    "\0\u05a4\0\u05a4\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u05a4"+
    "\0\u2270\0\u05a4\0\u05a4\0\u22bc\0\u2308\0\u0d10\0\u2354\0\u23a0"+
    "\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u05a4\0\u05a4"+
    "\0\u25b4\0\u2600\0\u264c\0\u05a4\0\u2698\0\u26e4\0\u2730\0\u05a4"+
    "\0\u277c\0\u27c8\0\u2814\0\u05a4\0\u2860\0\u05a4\0\u05a4\0\u28ac"+
    "\0\u05a4\0\u05a4\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74"+
    "\0\u2ac0\0\u05a4\0\u05a4\0\u2b0c\0\u2b58\0\u2ba4\0\u05a4\0\u05a4"+
    "\0\u05a4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8"+
    "\0\u2e04\0\u2e50\0\u05a4\0\u2e9c\0\u05a4\0\u2ee8\0\u2f34\0\u2f80"+
    "\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u05a4\0\u3148\0\u3194"+
    "\0\u31e0\0\u322c\0\u3278\0\u05a4\0\u32c4\0\u05a4\0\u05a4\0\u3310"+
    "\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u05a4\0\u05a4"+
    "\0\u3524\0\u3570\0\u35bc\0\u05a4\0\u3608\0\u05a4\0\u3654\0\u36a0"+
    "\0\u36ec\0\u05a4\0\u05a4\0\u05a4\0\u3738\0\u05a4\0\u05a4\0\u05a4"+
    "\0\u3784\0\u37d0\0\u381c\0\u05a4\0\u3868\0\u38b4\0\u05a4\0\u3900"+
    "\0\u394c\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60"+
    "\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u05a4\0\u05a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\3\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\32\1\33\6\32\1\34\4\32\1\35\1\2\1\36"+
    "\1\37\1\32\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\32\1\51\1\52\1\53\1\32"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\2\32"+
    "\1\63\1\64\1\65\2\2\115\0\4\3\114\0\1\66"+
    "\23\0\1\67\62\0\6\70\1\71\45\70\1\72\37\70"+
    "\31\0\1\73\73\0\1\74\102\0\12\75\1\71\41\75"+
    "\1\76\37\75\22\0\1\77\6\0\1\100\100\0\1\101"+
    "\4\0\3\22\3\0\1\102\102\0\1\103\2\0\3\22"+
    "\3\0\1\104\1\105\102\0\1\106\107\0\1\107\4\0"+
    "\1\110\6\0\1\111\103\0\1\112\1\0\3\22\31\0"+
    "\1\22\33\0\1\22\26\0\1\113\116\0\1\114\113\0"+
    "\1\115\113\0\1\116\113\0\1\117\1\0\1\120\103\0"+
    "\3\32\7\0\16\32\4\0\30\32\30\0\3\32\7\0"+
    "\6\32\1\121\6\32\1\122\4\0\30\32\30\0\3\32"+
    "\7\0\1\123\15\32\4\0\30\32\30\0\3\32\7\0"+
    "\16\32\4\0\2\32\1\124\16\32\1\125\1\126\5\32"+
    "\30\0\3\32\7\0\16\32\4\0\20\32\1\127\7\32"+
    "\30\0\3\32\7\0\16\32\4\0\1\32\1\130\14\32"+
    "\1\131\11\32\30\0\3\32\7\0\16\32\4\0\1\32"+
    "\1\132\14\32\1\133\4\32\1\134\4\32\30\0\3\32"+
    "\7\0\16\32\4\0\13\32\1\135\1\32\1\136\10\32"+
    "\1\137\1\32\30\0\3\32\7\0\16\32\4\0\1\32"+
    "\1\140\11\32\1\141\1\32\1\142\1\143\11\32\30\0"+
    "\3\32\7\0\16\32\4\0\5\32\1\144\22\32\30\0"+
    "\3\32\7\0\16\32\4\0\16\32\1\145\11\32\30\0"+
    "\3\32\7\0\16\32\4\0\6\32\1\146\6\32\1\147"+
    "\3\32\1\150\6\32\30\0\3\32\7\0\16\32\4\0"+
    "\11\32\1\151\16\32\30\0\3\32\7\0\16\32\4\0"+
    "\11\32\1\152\7\32\1\153\6\32\30\0\3\32\7\0"+
    "\16\32\4\0\1\32\1\154\14\32\1\155\4\32\1\156"+
    "\4\32\30\0\3\32\7\0\16\32\4\0\20\32\1\157"+
    "\7\32\30\0\3\32\7\0\16\32\4\0\5\32\1\160"+
    "\22\32\30\0\3\32\7\0\16\32\4\0\1\32\1\161"+
    "\10\32\1\162\7\32\1\163\5\32\30\0\1\32\1\164"+
    "\1\165\7\0\16\32\4\0\1\32\1\166\6\32\1\167"+
    "\1\170\6\32\1\171\6\32\1\172\30\0\3\32\7\0"+
    "\16\32\4\0\21\32\1\173\6\32\30\0\3\32\7\0"+
    "\16\32\4\0\1\32\1\174\26\32\30\0\3\32\7\0"+
    "\16\32\4\0\10\32\1\175\1\176\16\32\115\0\1\177"+
    "\3\0\6\70\1\200\45\70\1\72\37\70\2\75\3\0"+
    "\105\75\1\0\1\75\3\201\2\0\10\201\1\202\74\201"+
    "\1\0\1\201\2\110\1\0\1\110\1\0\107\110\23\0"+
    "\3\203\111\0\3\32\7\0\13\32\1\204\2\32\4\0"+
    "\30\32\30\0\3\32\7\0\4\32\1\205\11\32\4\0"+
    "\30\32\30\0\3\32\7\0\14\32\1\206\1\32\4\0"+
    "\30\32\30\0\3\32\7\0\16\32\4\0\21\32\1\207"+
    "\6\32\30\0\3\32\7\0\16\32\4\0\5\32\1\210"+
    "\22\32\30\0\3\32\7\0\16\32\4\0\22\32\1\211"+
    "\5\32\30\0\3\32\7\0\16\32\4\0\15\32\1\212"+
    "\12\32\30\0\3\32\7\0\16\32\4\0\27\32\1\213"+
    "\30\0\3\32\7\0\16\32\4\0\20\32\1\214\7\32"+
    "\30\0\3\32\7\0\16\32\4\0\21\32\1\215\6\32"+
    "\30\0\3\32\7\0\16\32\4\0\23\32\1\216\4\32"+
    "\30\0\3\32\7\0\16\32\4\0\22\32\1\217\5\32"+
    "\30\0\3\32\7\0\16\32\4\0\13\32\1\220\14\32"+
    "\30\0\3\32\7\0\16\32\4\0\16\32\1\221\11\32"+
    "\30\0\3\32\7\0\16\32\4\0\20\32\1\222\7\32"+
    "\30\0\3\32\7\0\16\32\4\0\16\32\1\223\11\32"+
    "\30\0\3\32\7\0\16\32\4\0\23\32\1\224\4\32"+
    "\30\0\3\32\7\0\16\32\4\0\22\32\1\225\5\32"+
    "\30\0\3\32\7\0\16\32\4\0\14\32\1\226\13\32"+
    "\30\0\3\32\7\0\16\32\4\0\15\32\1\227\12\32"+
    "\30\0\3\32\7\0\16\32\4\0\22\32\1\230\5\32"+
    "\30\0\3\32\7\0\16\32\4\0\4\32\1\231\23\32"+
    "\30\0\3\32\7\0\16\32\4\0\13\32\1\232\14\32"+
    "\30\0\3\32\7\0\16\32\4\0\11\32\1\233\16\32"+
    "\30\0\3\32\7\0\16\32\4\0\22\32\1\234\5\32"+
    "\30\0\3\32\7\0\16\32\4\0\14\32\1\235\13\32"+
    "\30\0\3\32\7\0\16\32\4\0\11\32\1\236\16\32"+
    "\30\0\3\32\7\0\16\32\4\0\1\32\1\237\16\32"+
    "\1\240\7\32\30\0\3\32\7\0\16\32\4\0\6\32"+
    "\1\241\21\32\30\0\3\32\7\0\16\32\4\0\6\32"+
    "\1\242\21\32\30\0\3\32\7\0\16\32\4\0\21\32"+
    "\1\243\6\32\30\0\3\32\7\0\16\32\4\0\11\32"+
    "\1\244\6\32\1\245\7\32\30\0\3\32\7\0\16\32"+
    "\4\0\14\32\1\246\13\32\30\0\3\32\7\0\16\32"+
    "\4\0\23\32\1\247\3\32\1\250\30\0\3\32\7\0"+
    "\16\32\4\0\17\32\1\251\10\32\30\0\3\32\7\0"+
    "\16\32\4\0\5\32\1\252\22\32\30\0\3\32\7\0"+
    "\16\32\4\0\20\32\1\253\7\32\30\0\3\32\7\0"+
    "\16\32\4\0\11\32\1\254\16\32\30\0\3\32\7\0"+
    "\16\32\4\0\22\32\1\255\5\32\5\0\3\201\2\0"+
    "\10\201\1\202\4\201\1\256\67\201\1\0\1\201\23\0"+
    "\3\203\31\0\1\203\33\0\1\203\23\0\3\32\7\0"+
    "\2\32\1\257\13\32\4\0\30\32\30\0\3\32\7\0"+
    "\13\32\1\260\2\32\4\0\30\32\30\0\3\32\7\0"+
    "\16\32\4\0\1\261\27\32\30\0\3\32\7\0\16\32"+
    "\4\0\22\32\1\262\5\32\30\0\3\32\7\0\16\32"+
    "\4\0\1\32\1\263\26\32\30\0\3\32\7\0\16\32"+
    "\4\0\3\32\1\264\24\32\30\0\3\32\7\0\16\32"+
    "\4\0\22\32\1\265\5\32\30\0\3\32\7\0\16\32"+
    "\4\0\1\32\1\266\26\32\30\0\3\32\7\0\16\32"+
    "\4\0\5\32\1\267\22\32\30\0\3\32\7\0\16\32"+
    "\4\0\14\32\1\270\13\32\30\0\3\32\7\0\16\32"+
    "\4\0\5\32\1\271\22\32\30\0\3\32\7\0\16\32"+
    "\4\0\21\32\1\272\6\32\30\0\3\32\7\0\16\32"+
    "\4\0\1\32\1\273\26\32\30\0\3\32\7\0\16\32"+
    "\4\0\20\32\1\274\7\32\30\0\3\32\7\0\16\32"+
    "\4\0\11\32\1\275\16\32\30\0\3\32\7\0\16\32"+
    "\4\0\11\32\1\276\16\32\30\0\3\32\7\0\16\32"+
    "\4\0\5\32\1\277\22\32\30\0\3\32\7\0\16\32"+
    "\4\0\13\32\1\300\14\32\30\0\3\32\7\0\16\32"+
    "\4\0\24\32\1\301\3\32\30\0\3\32\7\0\16\32"+
    "\4\0\23\32\1\302\4\32\30\0\3\32\7\0\16\32"+
    "\4\0\17\32\1\303\10\32\30\0\3\32\7\0\16\32"+
    "\4\0\17\32\1\304\10\32\30\0\3\32\7\0\16\32"+
    "\4\0\22\32\1\305\5\32\30\0\3\32\7\0\16\32"+
    "\4\0\12\32\1\306\15\32\30\0\3\32\7\0\16\32"+
    "\4\0\21\32\1\307\6\32\30\0\3\32\7\0\16\32"+
    "\4\0\16\32\1\310\11\32\30\0\3\32\7\0\16\32"+
    "\4\0\5\32\1\311\22\32\30\0\3\32\7\0\16\32"+
    "\4\0\5\32\1\312\22\32\30\0\3\32\7\0\16\32"+
    "\4\0\5\32\1\313\22\32\30\0\3\32\7\0\16\32"+
    "\4\0\13\32\1\314\14\32\30\0\3\32\7\0\16\32"+
    "\4\0\10\32\1\315\17\32\30\0\3\32\7\0\11\32"+
    "\1\316\4\32\4\0\30\32\30\0\3\32\7\0\16\32"+
    "\4\0\1\317\27\32\30\0\3\32\7\0\12\32\1\320"+
    "\3\32\4\0\30\32\30\0\3\32\7\0\16\32\4\0"+
    "\20\32\1\321\7\32\30\0\3\32\7\0\16\32\4\0"+
    "\12\32\1\322\15\32\30\0\3\32\7\0\16\32\4\0"+
    "\10\32\1\323\17\32\30\0\3\32\7\0\16\32\4\0"+
    "\11\32\1\324\16\32\30\0\3\32\7\0\16\32\4\0"+
    "\22\32\1\325\5\32\30\0\3\32\7\0\16\32\4\0"+
    "\15\32\1\326\12\32\30\0\3\32\7\0\16\32\4\0"+
    "\5\32\1\327\22\32\30\0\3\32\7\0\16\32\4\0"+
    "\22\32\1\330\5\32\30\0\3\32\7\0\16\32\4\0"+
    "\22\32\1\331\5\32\30\0\3\32\7\0\16\32\4\0"+
    "\24\32\1\332\3\32\30\0\3\32\7\0\3\32\1\333"+
    "\1\334\1\335\5\32\1\336\2\32\4\0\30\32\30\0"+
    "\3\32\7\0\16\32\4\0\1\32\1\337\26\32\30\0"+
    "\3\32\7\0\16\32\4\0\20\32\1\340\7\32\30\0"+
    "\3\32\7\0\16\32\4\0\13\32\1\341\14\32\30\0"+
    "\3\32\7\0\16\32\4\0\11\32\1\342\16\32\30\0"+
    "\3\32\7\0\16\32\4\0\25\32\1\343\2\32\30\0"+
    "\3\32\7\0\16\32\4\0\16\32\1\344\11\32\30\0"+
    "\3\32\7\0\16\32\4\0\5\32\1\345\22\32\30\0"+
    "\3\32\7\0\16\32\4\0\16\32\1\346\11\32\30\0"+
    "\3\32\7\0\16\32\4\0\1\347\27\32\30\0\3\32"+
    "\7\0\4\32\1\350\11\32\4\0\30\32\30\0\3\32"+
    "\7\0\13\32\1\351\2\32\4\0\30\32\30\0\3\32"+
    "\7\0\16\32\4\0\1\32\1\352\26\32\30\0\3\32"+
    "\7\0\16\32\4\0\15\32\1\353\12\32\30\0\3\32"+
    "\7\0\16\32\4\0\11\32\1\354\16\32\30\0\3\32"+
    "\7\0\16\32\4\0\4\32\1\355\23\32\30\0\3\32"+
    "\7\0\16\32\4\0\5\32\1\356\22\32\30\0\3\32"+
    "\7\0\16\32\4\0\5\32\1\357\22\32\30\0\3\32"+
    "\7\0\16\32\4\0\15\32\1\360\12\32\30\0\3\32"+
    "\7\0\16\32\4\0\11\32\1\361\16\32\30\0\3\32"+
    "\7\0\16\32\4\0\11\32\1\362\16\32\30\0\3\32"+
    "\7\0\16\32\4\0\22\32\1\363\5\32\30\0\3\32"+
    "\7\0\16\32\4\0\15\32\1\364\12\32\30\0\3\32"+
    "\7\0\16\32\4\0\11\32\1\365\16\32\30\0\3\32"+
    "\7\0\16\32\4\0\3\32\1\366\24\32\30\0\3\32"+
    "\7\0\16\32\4\0\6\32\1\367\21\32\30\0\3\32"+
    "\7\0\16\32\4\0\23\32\1\370\4\32\30\0\3\32"+
    "\7\0\4\32\1\371\11\32\4\0\30\32\30\0\3\32"+
    "\7\0\6\32\1\372\7\32\4\0\30\32\30\0\3\32"+
    "\7\0\11\32\1\373\4\32\4\0\30\32\30\0\3\32"+
    "\7\0\16\32\4\0\3\32\1\374\24\32\30\0\3\32"+
    "\7\0\16\32\4\0\23\32\1\375\4\32\30\0\3\32"+
    "\7\0\16\32\4\0\16\32\1\376\11\32\30\0\3\32"+
    "\7\0\16\32\4\0\21\32\1\377\6\32\30\0\3\32"+
    "\7\0\16\32\4\0\16\32\1\u0100\11\32\30\0\3\32"+
    "\7\0\16\32\4\0\4\32\1\u0101\23\32\30\0\3\32"+
    "\7\0\16\32\4\0\21\32\1\u0102\6\32\30\0\3\32"+
    "\7\0\16\32\4\0\14\32\1\u0103\13\32\30\0\3\32"+
    "\7\0\16\32\4\0\5\32\1\u0104\22\32\30\0\3\32"+
    "\7\0\16\32\4\0\15\32\1\u0105\12\32\30\0\3\32"+
    "\7\0\16\32\4\0\22\32\1\u0106\5\32\30\0\3\32"+
    "\7\0\6\32\1\u0107\7\32\4\0\30\32\30\0\3\32"+
    "\7\0\13\32\1\u0108\2\32\4\0\30\32\30\0\3\32"+
    "\7\0\4\32\1\u0109\11\32\4\0\30\32\30\0\3\32"+
    "\7\0\16\32\4\0\22\32\1\u010a\5\32\30\0\3\32"+
    "\7\0\16\32\4\0\5\32\1\u010b\22\32\30\0\3\32"+
    "\7\0\16\32\4\0\15\32\1\u010c\12\32\30\0\3\32"+
    "\7\0\16\32\4\0\5\32\1\u010d\22\32\30\0\3\32"+
    "\7\0\16\32\4\0\22\32\1\u010e\5\32\30\0\3\32"+
    "\7\0\16\32\4\0\5\32\1\u010f\22\32\30\0\3\32"+
    "\7\0\16\32\4\0\7\32\1\u0110\20\32\30\0\3\32"+
    "\7\0\13\32\1\u0111\2\32\4\0\30\32\30\0\3\32"+
    "\7\0\2\32\1\u0112\13\32\4\0\30\32\30\0\3\32"+
    "\7\0\6\32\1\u0113\7\32\4\0\30\32\30\0\3\32"+
    "\7\0\16\32\4\0\26\32\1\u0114\1\32\30\0\3\32"+
    "\7\0\2\32\1\u0115\13\32\4\0\30\32\30\0\3\32"+
    "\7\0\11\32\1\u0116\4\32\4\0\30\32\30\0\3\32"+
    "\7\0\3\32\1\u0117\12\32\4\0\30\32\30\0\3\32"+
    "\7\0\11\32\1\u0118\4\32\4\0\30\32\30\0\3\32"+
    "\7\0\10\32\1\u0119\5\32\4\0\30\32\30\0\3\32"+
    "\7\0\10\32\1\u011a\5\32\4\0\30\32\30\0\3\32"+
    "\7\0\7\32\1\u011b\6\32\4\0\30\32\30\0\3\32"+
    "\7\0\7\32\1\u011c\6\32\4\0\30\32\30\0\3\32"+
    "\7\0\5\32\1\u011d\10\32\4\0\30\32\30\0\3\32"+
    "\7\0\5\32\1\u011e\10\32\4\0\30\32\30\0\3\32"+
    "\7\0\1\u011f\15\32\4\0\30\32\30\0\3\32\7\0"+
    "\1\u0120\15\32\4\0\30\32\30\0\3\32\7\0\13\32"+
    "\1\u0121\2\32\4\0\30\32\30\0\3\32\7\0\13\32"+
    "\1\u0122\2\32\4\0\30\32\30\0\3\32\7\0\4\32"+
    "\1\u0123\11\32\4\0\30\32\30\0\3\32\7\0\4\32"+
    "\1\u0124\11\32\4\0\30\32\30\0\3\32\7\0\7\32"+
    "\1\u0125\6\32\4\0\30\32\30\0\3\32\7\0\7\32"+
    "\1\u0126\6\32\4\0\30\32\30\0\3\32\7\0\6\32"+
    "\1\u0127\7\32\4\0\30\32\30\0\3\32\7\0\6\32"+
    "\1\u0128\7\32\4\0\30\32\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15732];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\2\11\2\1\1\11"+
    "\5\1\1\11\4\1\1\11\3\1\3\11\23\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\2\11\2\0\10\11"+
    "\2\1\1\11\1\0\6\11\56\1\1\11\1\1\2\0"+
    "\246\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _GreyCatLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GreyCatLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 115: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 116: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 117: break;
          case 4:
            { return DQUOTE;
            }
          // fall through
          case 118: break;
          case 5:
            { return DOLLAR;
            }
          // fall through
          case 119: break;
          case 6:
            { return PERCENT;
            }
          // fall through
          case 120: break;
          case 7:
            { return AMP;
            }
          // fall through
          case 121: break;
          case 8:
            { return SQUOTE;
            }
          // fall through
          case 122: break;
          case 9:
            { return LPAREN;
            }
          // fall through
          case 123: break;
          case 10:
            { return RPAREN;
            }
          // fall through
          case 124: break;
          case 11:
            { return STAR;
            }
          // fall through
          case 125: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 126: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 127: break;
          case 14:
            { return MINUS;
            }
          // fall through
          case 128: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 129: break;
          case 16:
            { return SLASH;
            }
          // fall through
          case 130: break;
          case 17:
            { return NUMBER;
            }
          // fall through
          case 131: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 132: break;
          case 19:
            { return SEMI;
            }
          // fall through
          case 133: break;
          case 20:
            { return LT;
            }
          // fall through
          case 134: break;
          case 21:
            { return EQ;
            }
          // fall through
          case 135: break;
          case 22:
            { return GT;
            }
          // fall through
          case 136: break;
          case 23:
            { return QUESTION;
            }
          // fall through
          case 137: break;
          case 24:
            { return AT;
            }
          // fall through
          case 138: break;
          case 25:
            { return IDENTIFIER;
            }
          // fall through
          case 139: break;
          case 26:
            { return LSQUARE;
            }
          // fall through
          case 140: break;
          case 27:
            { return RSQUARE;
            }
          // fall through
          case 141: break;
          case 28:
            { return CARET;
            }
          // fall through
          case 142: break;
          case 29:
            { return D_S;
            }
          // fall through
          case 143: break;
          case 30:
            { return LCURLY;
            }
          // fall through
          case 144: break;
          case 31:
            { return BAR;
            }
          // fall through
          case 145: break;
          case 32:
            { return RCURLY;
            }
          // fall through
          case 146: break;
          case 33:
            { return NOT_NOT;
            }
          // fall through
          case 147: break;
          case 34:
            { return NOT_EQ;
            }
          // fall through
          case 148: break;
          case 35:
            { return STRING;
            }
          // fall through
          case 149: break;
          case 36:
            { return PERCENT_EQ;
            }
          // fall through
          case 150: break;
          case 37:
            { return AMP_AMP;
            }
          // fall through
          case 151: break;
          case 38:
            { return STAR_SLASH;
            }
          // fall through
          case 152: break;
          case 39:
            { return STAR_EQ;
            }
          // fall through
          case 153: break;
          case 40:
            { return PLUS_PLUS;
            }
          // fall through
          case 154: break;
          case 41:
            { return PLUS_EQ;
            }
          // fall through
          case 155: break;
          case 42:
            { return MINUS_MINUS;
            }
          // fall through
          case 156: break;
          case 43:
            { return MINUS_EQ;
            }
          // fall through
          case 157: break;
          case 44:
            { return ARROW;
            }
          // fall through
          case 158: break;
          case 45:
            { return DOT_DOT;
            }
          // fall through
          case 159: break;
          case 46:
            { return SLASH_STAR;
            }
          // fall through
          case 160: break;
          case 47:
            { return LINE_COMMENT;
            }
          // fall through
          case 161: break;
          case 48:
            { return SLASH_EQ;
            }
          // fall through
          case 162: break;
          case 49:
            { return COLON_COLON;
            }
          // fall through
          case 163: break;
          case 50:
            { return LT_EQ;
            }
          // fall through
          case 164: break;
          case 51:
            { return EQ_EQ;
            }
          // fall through
          case 165: break;
          case 52:
            { return GT_EQ;
            }
          // fall through
          case 166: break;
          case 53:
            { return QUESTION_EQ;
            }
          // fall through
          case 167: break;
          case 54:
            { return QUESTION_QUESTION;
            }
          // fall through
          case 168: break;
          case 55:
            { return AS_KW;
            }
          // fall through
          case 169: break;
          case 56:
            { return AT_KW;
            }
          // fall through
          case 170: break;
          case 57:
            { return DO_KW;
            }
          // fall through
          case 171: break;
          case 58:
            { return FN_KW;
            }
          // fall through
          case 172: break;
          case 59:
            { return IF_KW;
            }
          // fall through
          case 173: break;
          case 60:
            { return IN_KW;
            }
          // fall through
          case 174: break;
          case 61:
            { return IS_KW;
            }
          // fall through
          case 175: break;
          case 62:
            { return D_MS;
            }
          // fall through
          case 176: break;
          case 63:
            { return T2_ID;
            }
          // fall through
          case 177: break;
          case 64:
            { return T3_ID;
            }
          // fall through
          case 178: break;
          case 65:
            { return D_US;
            }
          // fall through
          case 179: break;
          case 66:
            { return BAR_BAR;
            }
          // fall through
          case 180: break;
          case 67:
            { return D_DAY;
            }
          // fall through
          case 181: break;
          case 68:
            { return FOR_KW;
            }
          // fall through
          case 182: break;
          case 69:
            { return GEO_ID;
            }
          // fall through
          case 183: break;
          case 70:
            { return INT_ID;
            }
          // fall through
          case 184: break;
          case 71:
            { return D_MIN;
            }
          // fall through
          case 185: break;
          case 72:
            { return STR_ID;
            }
          // fall through
          case 186: break;
          case 73:
            { return T2F_ID;
            }
          // fall through
          case 187: break;
          case 74:
            { return T3F_ID;
            }
          // fall through
          case 188: break;
          case 75:
            { return TRY_KW;
            }
          // fall through
          case 189: break;
          case 76:
            { return USE_KW;
            }
          // fall through
          case 190: break;
          case 77:
            { return VAR_KW;
            }
          // fall through
          case 191: break;
          case 78:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 192: break;
          case 79:
            { return ELSE_KW;
            }
          // fall through
          case 193: break;
          case 80:
            { return ENUM_KW;
            }
          // fall through
          case 194: break;
          case 81:
            { return D_HR;
            }
          // fall through
          case 195: break;
          case 82:
            { return NODE_ID;
            }
          // fall through
          case 196: break;
          case 83:
            { return NULL_KW;
            }
          // fall through
          case 197: break;
          case 84:
            { return SKIP_KW;
            }
          // fall through
          case 198: break;
          case 85:
            { return TASK_KW;
            }
          // fall through
          case 199: break;
          case 86:
            { return THIS_KW;
            }
          // fall through
          case 200: break;
          case 87:
            { return TIME_ID;
            }
          // fall through
          case 201: break;
          case 88:
            { return TRUE_KW;
            }
          // fall through
          case 202: break;
          case 89:
            { return TYPE_KW;
            }
          // fall through
          case 203: break;
          case 90:
            { return BREAK_KW;
            }
          // fall through
          case 204: break;
          case 91:
            { return CATCH_KW;
            }
          // fall through
          case 205: break;
          case 92:
            { return FALSE_KW;
            }
          // fall through
          case 206: break;
          case 93:
            { return FLOAT_ID;
            }
          // fall through
          case 207: break;
          case 94:
            { return LIMIT_KW;
            }
          // fall through
          case 208: break;
          case 95:
            { return THROW_KW;
            }
          // fall through
          case 209: break;
          case 96:
            { return WHILE_KW;
            }
          // fall through
          case 210: break;
          case 97:
            { return NATIVE_KW;
            }
          // fall through
          case 211: break;
          case 98:
            { return RETURN_KW;
            }
          // fall through
          case 212: break;
          case 99:
            { return STATIC_KW;
            }
          // fall through
          case 213: break;
          case 100:
            { return TYPE_OF_KW;
            }
          // fall through
          case 214: break;
          case 101:
            { return EXTENDS_KW;
            }
          // fall through
          case 215: break;
          case 102:
            { return NODE_GEO_ID;
            }
          // fall through
          case 216: break;
          case 103:
            { return PRIVATE_KW;
            }
          // fall through
          case 217: break;
          case 104:
            { return WITHOUT_KW;
            }
          // fall through
          case 218: break;
          case 105:
            { return ABSTRACT_KW;
            }
          // fall through
          case 219: break;
          case 106:
            { return CONTINUE_KW;
            }
          // fall through
          case 220: break;
          case 107:
            { return DURATION_ID;
            }
          // fall through
          case 221: break;
          case 108:
            { return NODE_LIST_ID;
            }
          // fall through
          case 222: break;
          case 109:
            { return NODE_TIME_ID;
            }
          // fall through
          case 223: break;
          case 110:
            { return SAMPLING_KW;
            }
          // fall through
          case 224: break;
          case 111:
            { return NODE_INDEX_ID;
            }
          // fall through
          case 225: break;
          case 112:
            { return RAW_STRING;
            }
          // fall through
          case 226: break;
          case 113:
            { return EXIT_INTERPOLATION;
            }
          // fall through
          case 227: break;
          case 114:
            { return ENTER_INTERPOLATION;
            }
          // fall through
          case 228: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
