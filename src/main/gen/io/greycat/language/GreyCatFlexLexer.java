/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.greycat.language; // Package which will be the lexer generation location.

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.greycat.language.psi.GreyCatTypes.*; // This is generated by the BNF
import static io.greycat.language.psi.GreyCatTypesExt.*; // This is a manual extension to handle "edge-cases"

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>GreyCat.flex</tt>
 */
public class GreyCatFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_TEMPLATE = 4;
  public static final int IN_INTERPOLATION = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\41\3\42\22\0\1\3\1\100\1\46\1\0\1\76\1\77\1\65\1\37\1\57\1\60"+
    "\1\45\1\35\1\63\1\72\1\36\1\44\1\2\1\13\1\12\1\11\1\10\1\2\1\7\1\2\1\14\1"+
    "\2\1\74\1\75\1\70\1\67\1\66\1\101\1\73\4\1\1\34\25\1\1\61\1\40\1\62\1\64\1"+
    "\33\1\0\1\22\1\51\1\52\1\20\1\17\1\5\1\25\1\27\1\4\1\1\1\32\1\53\1\16\1\24"+
    "\1\23\1\55\1\1\1\21\1\26\1\15\1\6\1\54\1\31\1\56\1\30\1\1\1\47\1\71\1\50\7"+
    "\0\1\43\242\0\2\43\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\14\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\5\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\3\40\1\41\1\1\1\4\1\42\1\1"+
    "\1\43\1\44\2\3\5\0\1\3\4\0\1\45\1\46"+
    "\1\47\2\2\1\50\10\2\1\51\1\2\1\52\1\53"+
    "\11\2\1\54\1\55\1\56\1\0\1\57\1\0\1\60"+
    "\1\61\1\62\1\63\1\64\6\2\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\0\1\105\6\0"+
    "\1\3\7\0\1\3\1\2\1\106\1\107\1\2\1\110"+
    "\24\2\1\111\1\2\5\0\1\2\1\112\1\113\1\114"+
    "\1\2\1\115\1\116\1\117\3\2\1\120\3\2\1\121"+
    "\7\2\2\0\1\122\1\123\10\2\1\124\1\125\1\126"+
    "\1\2\1\127\1\2\1\0\1\130\1\2\1\131\1\2"+
    "\1\132\1\133\4\2\1\0\1\134\2\2\1\135\1\2"+
    "\1\136\1\137\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0108\0\u0108\0\u0108\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0108\0\u0948\0\u0108"+
    "\0\u0108\0\u098a\0\u09cc\0\u0a0e\0\u0108\0\u0a50\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0108\0\u0108\0\u0b58\0\u0108\0\u0108\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0108\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u014a\0\u014a\0\u014a\0\u0e70\0\u0eb2\0\u014a"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u014a\0\u1104\0\u014a\0\u014a\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u0108\0\u0108\0\u0108"+
    "\0\u05ac\0\u0108\0\u1398\0\u13da\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u0108\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0b16\0\u0108"+
    "\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986"+
    "\0\u014a\0\u014a\0\u19c8\0\u014a\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u014a\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be"+
    "\0\u014a\0\u014a\0\u014a\0\u2100\0\u2142\0\u014a\0\u014a\0\u2184"+
    "\0\u21c6\0\u2208\0\u014a\0\u224a\0\u228c\0\u22ce\0\u014a\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u014a\0\u014a\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u014a\0\u014a\0\u014a\0\u2772\0\u014a\0\u27b4"+
    "\0\u27f6\0\u014a\0\u2838\0\u014a\0\u287a\0\u014a\0\u014a\0\u28bc"+
    "\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u014a\0\u2a06\0\u2a48\0\u014a"+
    "\0\u2a8a\0\u014a\0\u014a\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\6\7"+
    "\1\14\1\6\1\15\1\16\1\17\1\20\1\6\1\21"+
    "\1\6\1\22\2\6\1\23\1\6\1\24\1\6\1\25"+
    "\1\26\1\27\1\5\2\10\1\5\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\6"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\44\65\1\66\1\67\34\65\40\70"+
    "\1\71\1\72\4\70\1\73\27\70\1\74\3\70\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\6\7\1\14"+
    "\1\6\1\15\1\16\1\17\1\20\1\6\1\21\1\6"+
    "\1\22\2\6\1\23\1\6\1\24\1\6\1\25\1\26"+
    "\1\27\1\5\2\10\1\5\1\30\1\31\1\32\1\75"+
    "\1\76\1\35\1\36\1\37\1\40\1\41\1\6\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\103\0\2\6\1\0\31\6\14\0\6\6"+
    "\25\0\1\7\1\0\2\77\1\100\6\7\1\101\1\102"+
    "\1\103\1\104\4\0\1\105\1\106\1\107\1\110\1\111"+
    "\1\0\1\7\1\103\1\0\1\112\46\0\1\10\35\0"+
    "\2\10\40\0\2\6\1\0\1\6\1\113\16\6\1\114"+
    "\1\6\1\115\6\6\14\0\6\6\24\0\2\6\1\0"+
    "\16\6\1\116\1\117\1\120\10\6\14\0\6\6\24\0"+
    "\2\6\1\0\22\6\1\121\6\6\14\0\6\6\24\0"+
    "\2\6\1\0\15\6\1\122\1\123\4\6\1\124\1\125"+
    "\4\6\14\0\6\6\24\0\2\6\1\0\20\6\1\126"+
    "\10\6\14\0\2\6\1\127\2\6\1\130\24\0\2\6"+
    "\1\0\17\6\1\131\11\6\14\0\6\6\24\0\2\6"+
    "\1\0\13\6\1\132\15\6\14\0\6\6\24\0\2\6"+
    "\1\0\11\6\1\133\10\6\1\134\6\6\14\0\1\135"+
    "\5\6\24\0\2\6\1\0\2\6\1\136\13\6\1\137"+
    "\12\6\14\0\6\6\24\0\2\6\1\0\11\6\1\140"+
    "\4\6\1\141\7\6\1\142\2\6\14\0\6\6\24\0"+
    "\2\6\1\0\1\143\22\6\1\144\5\6\14\0\6\6"+
    "\24\0\1\6\1\24\1\0\3\6\6\24\2\6\1\145"+
    "\13\6\1\24\1\145\1\0\1\112\12\0\6\6\60\0"+
    "\1\146\31\0\1\147\50\0\1\150\43\0\37\151\1\152"+
    "\1\153\41\151\44\0\1\154\1\155\21\0\1\156\56\0"+
    "\1\157\22\0\1\160\13\0\2\6\1\0\15\6\1\161"+
    "\13\6\14\0\6\6\24\0\2\6\1\0\16\6\1\162"+
    "\1\163\11\6\14\0\6\6\24\0\2\6\1\0\1\164"+
    "\30\6\14\0\6\6\24\0\2\6\1\0\16\6\1\165"+
    "\12\6\14\0\6\6\24\0\2\6\1\0\15\6\1\166"+
    "\13\6\14\0\6\6\110\0\1\167\103\0\1\170\101\0"+
    "\1\171\101\0\1\172\103\0\1\173\76\0\1\174\1\175"+
    "\2\0\1\176\103\0\1\177\74\0\1\200\101\0\1\201"+
    "\10\0\1\202\70\0\1\203\11\0\1\204\45\0\1\205"+
    "\100\0\1\206\35\0\40\70\1\207\1\0\4\70\1\0"+
    "\27\70\1\0\44\70\3\0\36\70\47\0\1\210\41\0"+
    "\1\211\1\0\1\212\1\0\1\213\1\106\74\0\1\211"+
    "\1\0\1\212\1\0\1\213\1\106\11\0\1\106\57\0"+
    "\1\214\101\0\1\215\16\0\1\216\2\0\1\106\55\0"+
    "\1\217\4\0\6\217\16\0\1\217\1\0\1\220\34\0"+
    "\1\220\15\0\1\221\13\0\1\222\76\0\1\223\105\0"+
    "\1\224\75\0\1\225\101\0\1\226\64\0\1\227\4\0"+
    "\6\227\16\0\1\227\47\0\2\6\1\0\31\6\14\0"+
    "\2\6\1\230\3\6\24\0\2\6\1\0\15\6\1\231"+
    "\13\6\14\0\6\6\24\0\2\6\1\0\13\6\1\232"+
    "\15\6\14\0\6\6\24\0\2\6\1\0\2\6\1\233"+
    "\21\6\1\234\4\6\14\0\6\6\24\0\2\6\1\0"+
    "\22\6\1\235\6\6\14\0\6\6\24\0\2\6\1\0"+
    "\1\236\14\6\1\237\13\6\14\0\6\6\24\0\2\6"+
    "\1\0\31\6\14\0\4\6\1\240\1\6\24\0\2\6"+
    "\1\0\2\6\1\241\26\6\14\0\6\6\24\0\2\6"+
    "\1\0\22\6\1\242\6\6\14\0\6\6\24\0\2\6"+
    "\1\0\11\6\1\243\17\6\14\0\6\6\24\0\2\6"+
    "\1\0\11\6\1\244\17\6\14\0\6\6\24\0\2\6"+
    "\1\0\22\6\1\245\6\6\14\0\6\6\24\0\2\6"+
    "\1\0\31\6\14\0\2\6\1\246\3\6\24\0\2\6"+
    "\1\0\11\6\1\247\17\6\14\0\6\6\24\0\2\6"+
    "\1\0\16\6\1\250\12\6\14\0\6\6\24\0\2\6"+
    "\1\0\12\6\1\251\16\6\14\0\6\6\24\0\2\6"+
    "\1\0\1\252\30\6\14\0\6\6\24\0\2\6\1\0"+
    "\11\6\1\253\17\6\14\0\6\6\24\0\2\6\1\0"+
    "\1\254\30\6\14\0\6\6\24\0\2\6\1\0\31\6"+
    "\1\220\13\0\6\6\13\0\1\220\7\0\41\151\3\0"+
    "\36\151\41\154\1\0\40\154\1\0\2\6\1\0\13\6"+
    "\1\255\15\6\14\0\6\6\24\0\2\6\1\0\11\6"+
    "\1\256\17\6\14\0\6\6\24\0\2\6\1\0\20\6"+
    "\1\257\10\6\14\0\6\6\24\0\2\6\1\0\12\6"+
    "\1\260\16\6\14\0\6\6\24\0\2\6\1\0\15\6"+
    "\1\261\13\6\14\0\6\6\24\0\2\6\1\0\1\262"+
    "\30\6\14\0\6\6\33\0\1\106\103\0\1\106\76\0"+
    "\1\106\110\0\1\263\107\0\1\106\101\0\1\264\57\0"+
    "\1\217\1\0\2\77\1\100\6\217\1\101\1\102\1\0"+
    "\1\104\4\0\1\105\1\106\1\107\1\110\1\111\1\0"+
    "\1\217\50\0\1\217\4\0\6\217\16\0\1\217\67\0"+
    "\1\265\110\0\1\106\74\0\1\106\64\0\1\266\115\0"+
    "\1\266\76\0\1\267\64\0\1\227\1\0\2\77\1\100"+
    "\6\227\1\101\1\102\1\103\1\104\4\0\1\105\1\106"+
    "\1\107\1\110\1\111\1\0\1\227\1\103\46\0\2\6"+
    "\1\0\22\6\1\270\6\6\14\0\6\6\24\0\2\6"+
    "\1\0\13\6\1\271\15\6\14\0\6\6\24\0\2\6"+
    "\1\0\26\6\1\272\2\6\14\0\6\6\24\0\2\6"+
    "\1\0\22\6\1\273\6\6\14\0\6\6\24\0\2\6"+
    "\1\0\17\6\1\274\11\6\14\0\6\6\24\0\2\6"+
    "\1\0\13\6\1\275\15\6\14\0\6\6\24\0\2\6"+
    "\1\0\12\6\1\276\16\6\14\0\6\6\24\0\2\6"+
    "\1\0\13\6\1\277\15\6\14\0\6\6\24\0\2\6"+
    "\1\0\13\6\1\300\15\6\14\0\6\6\24\0\2\6"+
    "\1\0\2\6\1\301\26\6\14\0\6\6\24\0\2\6"+
    "\1\0\11\6\1\302\17\6\14\0\6\6\24\0\2\6"+
    "\1\0\31\6\14\0\2\6\1\303\3\6\24\0\2\6"+
    "\1\0\1\304\30\6\14\0\6\6\24\0\2\6\1\0"+
    "\11\6\1\305\17\6\14\0\6\6\24\0\2\6\1\0"+
    "\31\6\14\0\4\6\1\306\1\6\24\0\2\6\1\0"+
    "\31\6\14\0\4\6\1\307\1\6\24\0\2\6\1\0"+
    "\23\6\1\310\5\6\14\0\6\6\24\0\2\6\1\0"+
    "\31\6\14\0\2\6\1\311\3\6\24\0\2\6\1\0"+
    "\16\6\1\312\12\6\14\0\6\6\24\0\2\6\1\0"+
    "\31\6\14\0\1\6\1\313\4\6\24\0\2\6\1\0"+
    "\11\6\1\314\17\6\14\0\6\6\24\0\2\6\1\0"+
    "\1\315\30\6\14\0\6\6\24\0\2\6\1\0\31\6"+
    "\14\0\3\6\1\316\2\6\42\0\1\106\77\0\1\317"+
    "\106\0\1\320\100\0\1\106\112\0\1\106\50\0\2\6"+
    "\1\0\13\6\1\321\15\6\14\0\6\6\24\0\2\6"+
    "\1\0\25\6\1\322\3\6\14\0\6\6\24\0\2\6"+
    "\1\0\17\6\1\323\11\6\14\0\6\6\24\0\2\6"+
    "\1\0\20\6\1\324\10\6\14\0\6\6\24\0\2\6"+
    "\1\0\15\6\1\325\13\6\14\0\6\6\24\0\2\6"+
    "\1\0\15\6\1\326\13\6\14\0\6\6\24\0\2\6"+
    "\1\0\31\6\14\0\3\6\1\327\2\6\24\0\2\6"+
    "\1\0\1\330\30\6\14\0\6\6\24\0\2\6\1\0"+
    "\31\6\14\0\2\6\1\331\3\6\24\0\2\6\1\0"+
    "\17\6\1\332\11\6\14\0\6\6\24\0\2\6\1\0"+
    "\13\6\1\333\15\6\14\0\6\6\24\0\2\6\1\0"+
    "\26\6\1\334\2\6\14\0\6\6\24\0\2\6\1\0"+
    "\23\6\1\335\5\6\14\0\6\6\24\0\2\6\1\0"+
    "\1\336\30\6\14\0\6\6\24\0\2\6\1\0\11\6"+
    "\1\337\17\6\14\0\6\6\24\0\2\6\1\0\16\6"+
    "\1\340\12\6\14\0\6\6\52\0\1\106\67\0\1\341"+
    "\65\0\2\6\1\0\1\6\1\342\27\6\14\0\6\6"+
    "\24\0\2\6\1\0\14\6\1\343\14\6\14\0\6\6"+
    "\24\0\2\6\1\0\20\6\1\344\10\6\14\0\6\6"+
    "\24\0\2\6\1\0\16\6\1\345\12\6\14\0\6\6"+
    "\24\0\2\6\1\0\13\6\1\346\15\6\14\0\6\6"+
    "\24\0\2\6\1\0\31\6\14\0\1\6\1\347\4\6"+
    "\24\0\2\6\1\0\1\350\30\6\14\0\6\6\24\0"+
    "\2\6\1\0\2\6\1\351\26\6\14\0\6\6\24\0"+
    "\2\6\1\0\20\6\1\352\10\6\14\0\6\6\24\0"+
    "\2\6\1\0\11\6\1\353\17\6\14\0\6\6\27\0"+
    "\1\354\76\0\2\6\1\0\22\6\1\355\6\6\14\0"+
    "\6\6\24\0\2\6\1\0\31\6\14\0\1\6\1\356"+
    "\4\6\24\0\2\6\1\0\20\6\1\357\10\6\14\0"+
    "\6\6\24\0\2\6\1\0\11\6\1\360\17\6\14\0"+
    "\6\6\24\0\2\6\1\0\2\6\1\361\26\6\14\0"+
    "\6\6\24\0\2\6\1\0\13\6\1\362\15\6\14\0"+
    "\6\6\46\0\1\215\57\0\2\6\1\0\11\6\1\363"+
    "\17\6\14\0\6\6\24\0\2\6\1\0\21\6\1\364"+
    "\7\6\14\0\6\6\24\0\2\6\1\0\13\6\1\365"+
    "\15\6\14\0\6\6\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10956];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\24\1\3\11\5\1\6\11\6\1\1\11"+
    "\1\1\2\11\3\1\1\11\4\1\2\11\1\1\2\11"+
    "\2\1\5\0\1\11\4\0\33\1\3\11\1\0\1\11"+
    "\1\0\1\1\4\11\6\1\20\11\1\0\1\11\6\0"+
    "\1\1\7\0\34\1\5\0\27\1\2\0\20\1\1\0"+
    "\12\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final class GreyCatLexerState {
    final int lCurlyCount;
    final int state;

    private GreyCatLexerState(int state, int lCurlyCount) {
      this.state = state;
      this.lCurlyCount = lCurlyCount;
    }

    @Override
    public String toString() {
      return "yystate = " + state + (lCurlyCount == 0 ? "" : "lCurlyCount = " + lCurlyCount);
    }
  }

  protected final Stack<GreyCatLexerState> stateStack = new Stack<>();
  protected int lCurlyCount;

  private void pushState(int state) {
    stateStack.push(new GreyCatLexerState(yystate(), lCurlyCount));
    lCurlyCount = 0;
    yybegin(state);
  }

  private void popState() {
    GreyCatLexerState state = stateStack.pop();
    lCurlyCount = state.lCurlyCount;
    yybegin(state.state);
  }

  GreyCatFlexLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GreyCatFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      lCurlyCount = 0;
  stateStack.clear();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 98: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 99: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 100: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 101: break;
          case 5: 
            { return PLUS;
            } 
            // fall through
          case 102: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 103: break;
          case 7: 
            { return SQUOTE;
            } 
            // fall through
          case 104: break;
          case 8: 
            { return SLASH;
            } 
            // fall through
          case 105: break;
          case 9: 
            { return STAR;
            } 
            // fall through
          case 106: break;
          case 10: 
            { pushState(IN_TEMPLATE); return DQUOTE;
            } 
            // fall through
          case 107: break;
          case 11: 
            { return LCURLY;
            } 
            // fall through
          case 108: break;
          case 12: 
            { return RCURLY;
            } 
            // fall through
          case 109: break;
          case 13: 
            { return LPAREN;
            } 
            // fall through
          case 110: break;
          case 14: 
            { return RPAREN;
            } 
            // fall through
          case 111: break;
          case 15: 
            { return LSQUARE;
            } 
            // fall through
          case 112: break;
          case 16: 
            { return RSQUARE;
            } 
            // fall through
          case 113: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 114: break;
          case 18: 
            { return CARET;
            } 
            // fall through
          case 115: break;
          case 19: 
            { return AMP;
            } 
            // fall through
          case 116: break;
          case 20: 
            { return GT;
            } 
            // fall through
          case 117: break;
          case 21: 
            { return EQ;
            } 
            // fall through
          case 118: break;
          case 22: 
            { return LT;
            } 
            // fall through
          case 119: break;
          case 23: 
            { return BAR;
            } 
            // fall through
          case 120: break;
          case 24: 
            { return MINUS;
            } 
            // fall through
          case 121: break;
          case 25: 
            { return AT;
            } 
            // fall through
          case 122: break;
          case 26: 
            { return COLON;
            } 
            // fall through
          case 123: break;
          case 27: 
            { return SEMI;
            } 
            // fall through
          case 124: break;
          case 28: 
            { return DOLLAR;
            } 
            // fall through
          case 125: break;
          case 29: 
            { return PERCENT;
            } 
            // fall through
          case 126: break;
          case 30: 
            { return NOT;
            } 
            // fall through
          case 127: break;
          case 31: 
            { return QUESTION;
            } 
            // fall through
          case 128: break;
          case 32: 
            { return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 129: break;
          case 33: 
            { return RAW_STRING;
            } 
            // fall through
          case 130: break;
          case 34: 
            { popState(); return DQUOTE;
            } 
            // fall through
          case 131: break;
          case 35: 
            { lCurlyCount++; return LCURLY;
            } 
            // fall through
          case 132: break;
          case 36: 
            { if (lCurlyCount == 0) {
                                                          // we are supposed to get out of interpolation
                                                          popState();
                                                          return EXIT_INTERPOLATION;
                                                        }
                                                        lCurlyCount--;
                                                        return RCURLY;
            } 
            // fall through
          case 133: break;
          case 37: 
            { return IF_KW;
            } 
            // fall through
          case 134: break;
          case 38: 
            { return IN_KW;
            } 
            // fall through
          case 135: break;
          case 39: 
            { return IS_KW;
            } 
            // fall through
          case 136: break;
          case 40: 
            { return FN_KW;
            } 
            // fall through
          case 137: break;
          case 41: 
            { return DO_KW;
            } 
            // fall through
          case 138: break;
          case 42: 
            { return AT_KW;
            } 
            // fall through
          case 139: break;
          case 43: 
            { return AS_KW;
            } 
            // fall through
          case 140: break;
          case 44: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 141: break;
          case 45: 
            { return PLUS_EQ;
            } 
            // fall through
          case 142: break;
          case 46: 
            { return DOT_DOT;
            } 
            // fall through
          case 143: break;
          case 47: 
            { return STRING;
            } 
            // fall through
          case 144: break;
          case 48: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 145: break;
          case 49: 
            { pushState(IN_COMMENT); return MULTI_LINE_COMMENT_START;
            } 
            // fall through
          case 146: break;
          case 50: 
            { return SLASH_EQ;
            } 
            // fall through
          case 147: break;
          case 51: 
            { return STAR_SLASH;
            } 
            // fall through
          case 148: break;
          case 52: 
            { return STAR_EQ;
            } 
            // fall through
          case 149: break;
          case 53: 
            { return AMP_AMP;
            } 
            // fall through
          case 150: break;
          case 54: 
            { return GT_EQ;
            } 
            // fall through
          case 151: break;
          case 55: 
            { return EQ_EQ;
            } 
            // fall through
          case 152: break;
          case 56: 
            { return LT_EQ;
            } 
            // fall through
          case 153: break;
          case 57: 
            { return BAR_BAR;
            } 
            // fall through
          case 154: break;
          case 58: 
            { return ARROW;
            } 
            // fall through
          case 155: break;
          case 59: 
            { return MINUS_EQ;
            } 
            // fall through
          case 156: break;
          case 60: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 157: break;
          case 61: 
            { return COLON_COLON;
            } 
            // fall through
          case 158: break;
          case 62: 
            { return PERCENT_EQ;
            } 
            // fall through
          case 159: break;
          case 63: 
            { return NOT_EQ;
            } 
            // fall through
          case 160: break;
          case 64: 
            { return NOT_NOT;
            } 
            // fall through
          case 161: break;
          case 65: 
            { return QUESTION_EQ;
            } 
            // fall through
          case 162: break;
          case 66: 
            { return QUESTION_QUESTION;
            } 
            // fall through
          case 163: break;
          case 67: 
            { pushState(IN_COMMENT); return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 164: break;
          case 68: 
            { popState(); return yystate() == IN_COMMENT
                                                                   ? MULTI_LINE_COMMENT_BODY // inner comment closed
                                                                   : MULTI_LINE_COMMENT_END;
            } 
            // fall through
          case 165: break;
          case 69: 
            { pushState(IN_INTERPOLATION); return ENTER_INTERPOLATION;
            } 
            // fall through
          case 166: break;
          case 70: 
            { return FOR_KW;
            } 
            // fall through
          case 167: break;
          case 71: 
            { return USE_KW;
            } 
            // fall through
          case 168: break;
          case 72: 
            { return TRY_KW;
            } 
            // fall through
          case 169: break;
          case 73: 
            { return VAR_KW;
            } 
            // fall through
          case 170: break;
          case 74: 
            { return TRUE_KW;
            } 
            // fall through
          case 171: break;
          case 75: 
            { return TASK_KW;
            } 
            // fall through
          case 172: break;
          case 76: 
            { return THIS_KW;
            } 
            // fall through
          case 173: break;
          case 77: 
            { return TYPE_KW;
            } 
            // fall through
          case 174: break;
          case 78: 
            { return ENUM_KW;
            } 
            // fall through
          case 175: break;
          case 79: 
            { return ELSE_KW;
            } 
            // fall through
          case 176: break;
          case 80: 
            { return NULL_KW;
            } 
            // fall through
          case 177: break;
          case 81: 
            { return SKIP_KW;
            } 
            // fall through
          case 178: break;
          case 82: 
            { return FALSE_KW;
            } 
            // fall through
          case 179: break;
          case 83: 
            { return THROW_KW;
            } 
            // fall through
          case 180: break;
          case 84: 
            { return WHILE_KW;
            } 
            // fall through
          case 181: break;
          case 85: 
            { return BREAK_KW;
            } 
            // fall through
          case 182: break;
          case 86: 
            { return CATCH_KW;
            } 
            // fall through
          case 183: break;
          case 87: 
            { return LIMIT_KW;
            } 
            // fall through
          case 184: break;
          case 88: 
            { return TYPE_OF_KW;
            } 
            // fall through
          case 185: break;
          case 89: 
            { return RETURN_KW;
            } 
            // fall through
          case 186: break;
          case 90: 
            { return NATIVE_KW;
            } 
            // fall through
          case 187: break;
          case 91: 
            { return STATIC_KW;
            } 
            // fall through
          case 188: break;
          case 92: 
            { return EXTENDS_KW;
            } 
            // fall through
          case 189: break;
          case 93: 
            { return WITHOUT_KW;
            } 
            // fall through
          case 190: break;
          case 94: 
            { return PRIVATE_KW;
            } 
            // fall through
          case 191: break;
          case 95: 
            { return ABSTRACT_KW;
            } 
            // fall through
          case 192: break;
          case 96: 
            { return SAMPLING_KW;
            } 
            // fall through
          case 193: break;
          case 97: 
            { return CONTINUE_KW;
            } 
            // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
